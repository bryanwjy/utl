/* Copyright 2023-2024 Bryan Wong */

#pragma once

#include "utl/preprocessor/utl_apply_macro.h"
#include "utl/preprocessor/utl_concatenation.h"
#include "utl/preprocessor/utl_is_empty.h"
#include "utl/preprocessor/utl_paste.h"

/**
 * TODO: This is way too complicated and probably adds some preprocessing overhead, investigate if
 * there is a simpler way
 */

#define UTL_AL_SCOPE_IF_1()
#define UTL_AL_SCOPE_IF_0(...) [[__VA_ARGS__]]
#define UTL_AL_SCOPE_IF(...) \
    UTL_PASTE(UTL_APPEND_IS_EMPTY(UTL_AL_SCOPE_IF_, __VA_ARGS__)(__VA_ARGS__))

#define UTL_CPP_ATTR_SCOPE_IF_1()
#define UTL_CPP_ATTR_SCOPE_IF_0(...) [[__VA_ARGS__]]
#define UTL_CPP_ATTR_SCOPE_IF(...) \
    UTL_PASTE(UTL_APPEND_IS_EMPTY(UTL_CPP_ATTR_SCOPE_IF_, __VA_ARGS__)(__VA_ARGS__))

#define UTL_GNU_ATTR_SCOPE_IF_1()
#define UTL_GNU_ATTR_SCOPE_IF_0(...) __attribute__((__VA_ARGS__))
#define UTL_GNU_ATTR_SCOPE_IF(...) \
    UTL_PASTE(UTL_APPEND_IS_EMPTY(UTL_GNU_ATTR_SCOPE_IF_, __VA_ARGS__)(__VA_ARGS__))

#define UTL_DECLSPEC_SCOPE_IF_1()
#define UTL_DECLSPEC_SCOPE_IF_0(...) __declspec(__VA_ARGS__)
#define UTL_DECLSPEC_SCOPE_IF(...) \
    UTL_PASTE(UTL_APPEND_IS_EMPTY(UTL_DECLSPEC_SCOPE_IF_, __VA_ARGS__)(__VA_ARGS__))

#define UTL_AL_EXPAND_IMPL(NAME) ((UTL_CONCAT(UTL_ATTRIBUTE_, NAME)))
#define UTL_AL_EXPAND(ARGS) UTL_SWAP_CONCAT(_END, UTL_AL_EXPAND_IMPL_1 ARGS)
#define UTL_AL_EXPAND_IMPL_1(MEMBER) UTL_AL_EXPAND_IMPL(MEMBER) UTL_AL_EXPAND_IMPL_2
#define UTL_AL_EXPAND_IMPL_2(MEMBER) UTL_AL_EXPAND_IMPL(MEMBER) UTL_AL_EXPAND_IMPL_1
#define UTL_AL_EXPAND_IMPL_1_END
#define UTL_AL_EXPAND_IMPL_2_END

#define UTL_AL_CLEAN_1()
#define UTL_AL_CLEAN_0(ARG) (ARG)
#define UTL_AL_CLEAN(...) UTL_PASTE(UTL_APPEND_IS_EMPTY(UTL_AL_CLEAN_, __VA_ARGS__)(__VA_ARGS__))

#define UTL_AL_CLEAN_ARGS(ARGS) UTL_SWAP_CONCAT(_END, UTL_AL_CLEAN_ARGS_IMPL_1 ARGS)
#define UTL_AL_CLEAN_ARGS_IMPL_1(ARG) UTL_AL_CLEAN ARG UTL_AL_CLEAN_ARGS_IMPL_2
#define UTL_AL_CLEAN_ARGS_IMPL_2(ARG) UTL_AL_CLEAN ARG UTL_AL_CLEAN_ARGS_IMPL_1
#define UTL_AL_CLEAN_ARGS_IMPL_1_END
#define UTL_AL_CLEAN_ARGS_IMPL_2_END

#define UTL_AL_BUILD_LIST_IMPL_BEGIN(NAME) NAME
#define UTL_AL_BUILD_LIST_IMPL(NAME) , NAME

#define UTL_AL_BUILD_LIST(ARGS) UTL_SWAP_CONCAT(_END, UTL_AL_BUILD_LIST_IMPL_1 ARGS)
#define UTL_AL_BUILD_LIST_IMPL_1(MEMBER) \
    UTL_AL_BUILD_LIST_IMPL_BEGIN(MEMBER) UTL_AL_BUILD_LIST_IMPL_2
#define UTL_AL_BUILD_LIST_IMPL_2(MEMBER) UTL_AL_BUILD_LIST_IMPL(MEMBER) UTL_AL_BUILD_LIST_IMPL_3
#define UTL_AL_BUILD_LIST_IMPL_3(MEMBER) UTL_AL_BUILD_LIST_IMPL(MEMBER) UTL_AL_BUILD_LIST_IMPL_2
#define UTL_AL_BUILD_LIST_IMPL_2_END
#define UTL_AL_BUILD_LIST_IMPL_3_END

#define UTL_AL_CONCAT3(X, Y, Z) X##Y##Z
#define UTL_AL_NONSTD_1(NAME) UTL_CONCAT(UTL_NONSTD_ATTRIBUTE_, NAME)
#define UTL_AL_NONSTD_0(X)
#define UTL_AL_NONSTD(NAME, ...) UTL_PASTE(UTL_APPEND_IS_EMPTY(UTL_AL_NONSTD_, __VA_ARGS__)(NAME))
#define UTL_AL_NONSTD_DEFINITION(NAME) UTL_AL_CONCAT3(UTL_NONSTD_ATTRIBUTE_, NAME, _DEFINED)

#define UTL_AL_APPLY_NONSTD(ARGS) UTL_SWAP_CONCAT(_END, UTL_AL_APPLY_NONSTD_IMPL_1 ARGS)
#define UTL_AL_APPLY_NONSTD_IMPL_1(NAME) \
    UTL_AL_NONSTD(NAME, UTL_AL_NONSTD_DEFINITION(NAME)) UTL_AL_APPLY_NONSTD_IMPL_2
#define UTL_AL_APPLY_NONSTD_IMPL_2(NAME) \
    UTL_AL_NONSTD(NAME, UTL_AL_NONSTD_DEFINITION(NAME)) UTL_AL_APPLY_NONSTD_IMPL_1
#define UTL_AL_APPLY_NONSTD_IMPL_1_END
#define UTL_AL_APPLY_NONSTD_IMPL_2_END

#define UTL_AL_PARENTHESIZE(_0) (_0)

#define UTL_ATTRIBUTES_(ATTR) \
    UTL_AL_APPLY_NONSTD(ATTR) \
    UTL_AL_SCOPE_IF(UTL_AL_BUILD_LIST(UTL_AL_CLEAN_ARGS(UTL_AL_EXPAND(ATTR))))

#define UTL_ATTRIBUTES(...) \
    UTL_ATTRIBUTES_(UTL_PASTE(UTL_APPLY_MACRO(UTL_AL_PARENTHESIZE, __VA_ARGS__)))
#define UTL_ATTRIBUTE(ATTR) \
    UTL_AL_APPLY_NONSTD((ATTR)) UTL_AL_SCOPE_IF(UTL_CONCAT(UTL_ATTRIBUTE_, ATTR))
